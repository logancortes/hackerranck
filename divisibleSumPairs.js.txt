//With this code I have only passed 10 out of 20 tests, I have not figured out what is going on =[

/*

Given an array of integers and a positive integer k, determine the number of (i, j) pairs where i < j and ar[i] + ar[j] is divisible by k.

Example:

ar=[1,2,3,4,5,6]
k = 5


Three pairs meet the criteria: [1,4], [2,3], and [4,6].

Function Description:

Complete the divisibleSumPairs function in the editor below.

divisibleSumPairs has the following parameter(s):

int n: the length of array 
int ar[n]: an array of integers
int k: the integer divisor
Returns
- int: the number of pairs

Input Format

The first line contains 2 space-separated integers, n and k.
The second line contains n space-separated integers, each a value of arr[i].

*/


function divisibleSumPairs(n, k, ar) {
    // Write your code here
	
	const pairArray=[];
    let i = 0, j, isDivisible, pairCount = 0; //i is the right side number to compare in array.
    //We iterate through the numbers of the array.
    for(let number of ar){
        i = number;
        //We iterate through one number ahead to compare the each number within the array to the adjacent ones.
        for(j = 1; j < ar.length; j++) {
            //If number on the left is smaller than the one on the right it enters the condition.
            if (i < ar[j]){
                //If the modulo result is 0, then it is divisible by the k number, otherwise it is not.
                isDivisible = (number + ar[j]) % k;
                if(isDivisible === 0) {
                    pairCount++;
                }
            }
        }
    }
    console.log(pairCount);
    return pairCount;
}
